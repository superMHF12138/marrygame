/*! qrcode.js v1.0.0 (ultra-min) | MIT | https://github.com/davidshimjs/qrcodejs */
var QRCode; !function () { function t(t) { this.mode = r.MODE_8BIT_BYTE, this.data = t } function e(t, e) { this.typeNumber = t, this.errorCorrectLevel = e, this.modules = null, this.moduleCount = 0, this.dataCache = null, this.dataList = [] } function n(t, e) { if (void 0 == t.length) throw new Error(t.length + "/" + e); for (var n = 0; n < t.length && 0 == t[n];)n++; this.num = Array(t.length - n + e); for (var r = 0; r < t.length - n; r++)this.num[r] = t[r + n] } function o(t, e) { this.totalCount = t, this.dataCount = e } function i() { this.buffer = [], this.length = 0 } function a() { return "undefined" != typeof CanvasRenderingContext2D } function s() { var t = !1, e = navigator.userAgent; return /android/i.test(e) && (t = !0, e = e.toLowerCase().match(/android\s([0-9\.]*)/), t = e && e[1] ? parseFloat(e[1]) : !0), t } function h(t, e) { for (var n = 1; n <= 40; n++) { var o = f.getRSBlocks(n, e); if (null != o) { var i = new eCtor(n, e), a = 0; for (i.addData(t), i.make(), j = 0; j < i.dataList.length; j++)a += i.dataList[j].getLength(); if (a <= i.getMaxLength(n)) return n } } return 40 } var r = { PAD0: 236, PAD1: 17, MODE_NUMBER: 1, MODE_ALPHA_NUM: 2, MODE_8BIT_BYTE: 4, MODE_KANJI: 8 }, c = { L: 1, M: 0, Q: 3, H: 2 }, f = { getBCHTypeInfo: function (t) { for (var e = t << 10; f.getBCHDigit(e) - f.getBCHDigit(1335) >= 0;)e ^= 1335 << f.getBCHDigit(e) - f.getBCHDigit(1335); return t << 10 | e }, getBCHTypeNumber: function (t) { for (var e = t << 12; f.getBCHDigit(e) - f.getBCHDigit(7973) >= 0;)e ^= 7973 << f.getBCHDigit(e) - f.getBCHDigit(7973); return t << 12 | e }, getBCHDigit: function (t) { for (var e = 0; 0 != t;)e++, t >>>= 1; return e }, getPatternPosition: function (t) { return u[t - 1] }, getMask: function (t, e, n) { switch (t) { case 0: return (e + n) % 2 == 0; case 1: return e % 2 == 0; case 2: return n % 3 == 0; case 3: return (e + n) % 3 == 0; case 4: return (Math.floor(e / 2) + Math.floor(n / 3)) % 2 == 0; case 5: return e * n % 2 + e * n % 3 == 0; case 6: return (e * n % 2 + e * n % 3) % 2 == 0; case 7: return (e * n % 3 + (e + n) % 2) % 2 == 0; default: throw new Error("bad maskPattern:" + t) } }, getErrorCorrectPolynomial: function (t) { for (var e = new n([1], 0), o = 0; o < t; o++)e = e.multiply(new n([1, d.gexp(o)], 0)); return e }, getLengthInBits: function (t, e) { if (e >= 1 && e < 10) switch (t) { case r.MODE_NUMBER: return 10; case r.MODE_ALPHA_NUM: return 9; case r.MODE_8BIT_BYTE: return 8; case r.MODE_KANJI: return 8; default: throw new Error("mode:" + t) } else if (e < 27) switch (t) { case r.MODE_NUMBER: return 12; case r.MODE_ALPHA_NUM: return 11; case r.MODE_8BIT_BYTE: return 16; case r.MODE_KANJI: return 10; default: throw new Error("mode:" + t) } else { if (!(e < 41)) throw new Error("type:" + e); switch (t) { case r.MODE_NUMBER: return 14; case r.MODE_ALPHA_NUM: return 13; case r.MODE_8BIT_BYTE: return 16; case r.MODE_KANJI: return 12; default: throw new Error("mode:" + t) } } }, getLostPoint: function (t) { for (var e = t.getModuleCount(), n = 0, o = 0; o < e; o++)for (var i = 0; i < e; i++) { for (var a = 0, s = t.isDark(o, i), h = -1; h <= 1; h++)if (!(o + h < 0 || e <= o + h)) for (var r = -1; r <= 1; r++)i + r < 0 || e <= i + r || 0 == h && 0 == r || s == t.isDark(o + h, i + r) && a++; a > 5 && (n += 3 + a - 5) } for (o = 0; o < e - 1; o++)for (i = 0; i < e - 1; i++) { var c = 0; t.isDark(o, i) && c++, t.isDark(o + 1, i) && c++, t.isDark(o, i + 1) && c++, t.isDark(o + 1, i + 1) && c++, 0 != c && 4 != c || (n += 3) } for (o = 0; o < e; o++)for (i = 0; i < e - 6; i++)t.isDark(o, i) && !t.isDark(o, i + 1) && t.isDark(o, i + 2) && t.isDark(o, i + 3) && t.isDark(o, i + 4) && !t.isDark(o, i + 5) && t.isDark(o, i + 6) && (n += 40); for (i = 0; i < e; i++)for (o = 0; o < e - 6; o++)t.isDark(o, i) && !t.isDark(o + 1, i) && t.isDark(o + 2, i) && t.isDark(o + 3, i) && t.isDark(o + 4, i) && !t.isDark(o + 5, i) && t.isDark(o + 6, i) && (n += 40); for (var f2 = 0, l = 0, i = 0; i < e; i++)for (o = 0; o < e; o++)t.isDark(o, i) && f2++; l = Math.abs(100 * f2 / e / e - 50) / 5, n += 10 * l; return n } }, d = { glog: function (t) { if (t < 1) throw new Error("glog(" + t + ")"); return p[t] }, gexp: function (t) { for (; t < 0;)t += 255; for (; t >= 256;)t -= 255; return g[t] } }, p = new Array(256), g = new Array(256); for (var m = 0; m < 8; m++)g[m] = 1 << m; for (m = 8; m < 256; m++)g[m] = g[m - 4] ^ g[m - 5] ^ g[m - 6] ^ g[m - 8]; for (m = 0; m < 256; m++)p[g[m]] = m; var u = [[6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 30, 60, 90], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]]; var eCtor = function (t, n) { return new e(t, n) }; e.prototype = { addData: function (e) { var n = new t(e); this.dataList.push(n), this.dataCache = null }, isDark: function (t, e) { if (null == this.modules) throw new Error("modules not initialized"); if (0 > t || t >= this.moduleCount || 0 > e || e >= this.moduleCount) throw new Error(t + "," + e); return this.modules[t][e] }, getModuleCount: function () { return this.moduleCount }, make: function () { this.makeImpl(!1, this.getBestMaskPattern()) }, makeImpl: function (t, e) { this.moduleCount = 4 * this.typeNumber + 17, this.modules = new Array(this.moduleCount); for (var n = 0; n < this.moduleCount; n++) { this.modules[n] = new Array(this.moduleCount); for (var o = 0; o < this.moduleCount; o++)this.modules[n][o] = null } this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this.moduleCount - 7, 0), this.setupPositionProbePattern(0, this.moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(t, e), this.typeNumber >= 7 && this.setupTypeNumber(t), null == this.dataCache && (this.dataCache = eCtor.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)), this.mapData(this.dataCache, e) }, setupPositionProbePattern: function (t, e) { for (var n = -1; n <= 7; n++)if (!(t + n <= -1 || this.moduleCount <= t + n)) for (var o = -1; o <= 7; o++)e + o <= -1 || this.moduleCount <= e + o || (this.modules[t + n][e + o] = n >= 0 && n <= 6 && (0 == o || 6 == o) || o >= 0 && o <= 6 && (0 == n || 6 == n) || n >= 2 && n <= 4 && o >= 2 && o <= 4) }, getBestMaskPattern: function () { for (var t = 0, e = 0, n = 0; n < 8; n++) { this.makeImpl(!0, n); var o = f.getLostPoint(this); (0 == n || t > o) && (t = o, e = n) } return e }, setupTimingPattern: function () { for (var t = 8; t < this.moduleCount - 8; t++)null == this.modules[t][6] && (this.modules[t][6] = t % 2 == 0), null == this.modules[6][t] && (this.modules[6][t] = t % 2 == 0) }, setupPositionAdjustPattern: function () { for (var t = f.getPatternPosition(this.typeNumber), e = 0; e < t.length; e++)for (var n = 0; n < t.length; n++) { var o = t[e], i = t[n]; if (null == this.modules[o][i]) for (var a = -2; a <= 2; a++)for (var s = -2; s <= 2; s++)this.modules[o + a][i + s] = -2 == a || 2 == a || -2 == s || 2 == s || 0 == a && 0 == s } }, setupTypeNumber: function (t) { for (var e = f.getBCHTypeNumber(this.typeNumber), n = 0; n < 18; n++) { var o = !t && 1 == (e >> n & 1); this.modules[Math.floor(n / 3)][n % 3 + this.moduleCount - 8 - 3] = o } for (n = 0; n < 18; n++)o = !t && 1 == (e >> n & 1), this.modules[n % 3 + this.moduleCount - 8 - 3][Math.floor(n / 3)] = o }, setupTypeInfo: function (t, e) { for (var n = c[this.errorCorrectLevel] << 3 | e, o = f.getBCHTypeInfo(n), i = 0; i < 15; i++) { var a = !t && 1 == (o >> i & 1); i < 6 ? this.modules[i][8] = a : i < 8 ? this.modules[i + 1][8] = a : this.modules[this.moduleCount - 15 + i][8] = a } for (i = 0; i < 15; i++)a = !t && 1 == (o >> i & 1), i < 8 ? this.modules[8][this.moduleCount - i - 1] = a : i < 9 ? this.modules[8][15 - i - 1 + 1] = a : this.modules[8][15 - i - 1] = a; this.modules[this.moduleCount - 8][8] = !t }, mapData: function (t, e) { for (var n = -1, o = this.moduleCount - 1, i = 7, a = 0, s = this.moduleCount - 1; s > 0; s -= 2)for (6 == s && s--; ;) { for (var h = 0; h < 2; h++)if (null == this.modules[o][s - h]) { var r = !1; a < t.length && (r = 1 == (t[a] >>> i & 1)); var c = f.getMask(e, o, s - h); c && (r = !r), this.modules[o][s - h] = r } if (o += n, 0 > o || this.moduleCount <= o) { o -= n, n = -n; break } } } }; eCtor.stringToBytes = function (t) { for (var e = [], n = 0; n < t.length; n++) { var o = t.charCodeAt(n); e.push(255 & o) } return e }; var y = { stringToBytes: eCtor.stringToBytes }; t.prototype = { getLength: function () { return eCtor.stringToBytes(this.data).length }, write: function (t) { for (var n = eCtor.stringToBytes(this.data), o = 0; o < n.length; o++)t.put(n[o], 8) } }; eCtor.createData = function (t, e, o) { for (var a = f.getRSBlocks(t, e), s = new i, h = 0; h < o.length; h++)s.put(o[h].mode, 4), s.put(o[h].getLength(), f.getLengthInBits(o[h].mode, t)), o[h].write(s); for (var r = 0, c = 0, h = 0; h < a.length; h++)r += a[h].dataCount, c += a[h].totalCount; for (; s.getLengthInBits() > 8 * r;)s.getLengthInBits() -= 4; for (; s.getLengthInBits() % 8 != 0;)s.putBit(!1); for (; !(s.getLengthInBits() >= 8 * r);) { s.put(rModes.PAD0, 8); if (s.getLengthInBits() >= 8 * r) break; s.put(rModes.PAD1, 8) } return eCtor.createBytes(s, a) }; eCtor.createBytes = function (t, e) { for (var o = 0, i = 0, a = 0, s = new Array(e.length), h = new Array(e.length), r = 0; r < e.length; r++) { var c = e[r].dataCount, f = e[r].totalCount - c; i = Math.max(i, c), a = Math.max(a, f), s[r] = new Array(c); for (var l = 0; l < s[r].length; l++)s[r][l] = 255 & t.buffer[l + o]; o += c; var p = f2.getErrorCorrectPolynomial(f), g = new n(s[r], p.getLength() - 1), u = g.mod(p); h[r] = new Array(p.getLength() - 1); for (l = 0; l < h[r].length; l++)h[r][l] = u.get(l) } for (var d = 0, l = 0; l < e.length; l++)d += e[l].totalCount; for (var m = new Array(d), v = 0, l = 0; l < i; l++)for (r = 0; r < e.length; r++)l < s[r].length && (m[v++] = s[r][l]); for (l = 0; l < a; l++)for (r = 0; r < e.length; r++)l < h[r].length && (m[v++] = h[r][l]); return m }; n.prototype = { get: function (t) { return this.num[t] }, getLength: function () { return this.num.length }, multiply: function (t) { for (var e = new Array(this.getLength() + t.getLength() - 1), o = 0; o < this.getLength(); o++)for (var i = 0; i < t.getLength(); i++)e[o + i] ^= d.gexp(d.glog(this.get(o)) + d.glog(t.get(i))); return new n(e, 0) }, mod: function (t) { if (this.getLength() - t.getLength() < 0) return this; for (var e = d.glog(this.get(0)) - d.glog(t.get(0)), o = new Array(this.getLength()), i = 0; i < this.getLength(); i++)o[i] = this.get(i); for (i = 0; i < t.getLength(); i++)o[i] ^= d.gexp(d.glog(t.get(i)) + e); return new n(o, 0).mod(t) } }; o.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 4, 40, 14], [4, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16]]; o.getRSBlocks = function (t, e) { var n = o.getRsBlockTable(t, e); if (void 0 == n) throw new Error("bad rs block @ typeNumber:" + t + "/errorCorrectLevel:" + e); for (var i = n.length / 3, a = [], s = 0; s < i; s++)for (var h = n[3 * s + 0], r = n[3 * s + 1], c = n[3 * s + 2], f = 0; f < h; f++)a.push(new o(r, c)); return a }, o.getRsBlockTable = function (t, e) { switch (e) { case c.L: return o.RS_BLOCK_TABLE[4 * (t - 1) + 0]; case c.M: return o.RS_BLOCK_TABLE[4 * (t - 1) + 1]; case c.Q: return o.RS_BLOCK_TABLE[4 * (t - 1) + 2]; case c.H: return o.RS_BLOCK_TABLE[4 * (t - 1) + 3]; default: return } }; i.prototype = { get: function (t) { var e = Math.floor(t / 8); return (this.buffer[e] >>> 7 - t % 8 & 1) == 1 }, put: function (t, e) { for (var n = 0; n < e; n++)this.putBit((t >>> e - n - 1 & 1) == 1) }, getLengthInBits: function () { return this.length }, putBit: function (t) { var e = Math.floor(this.length / 8); this.buffer.length <= e && this.buffer.push(0), t && (this.buffer[e] |= 128 >>> this.length % 8), this.length++ } }; var rModes = r; var eCtor2 = eCtor; var eCtor2Canvas = a; QRCode = function (t, n) { if (this._android = s(), this._el = "string" == typeof t ? document.getElementById(t) : t, this._htOption = n, this._el.style.position = "relative", this._el.style.padding = "0", this._el.title = "", this._qrcode = null, this._oDrawing = null, this._el.hasChildNodes()) for (; this._el.hasChildNodes();)this._el.removeChild(this._el.lastChild); this._oQRCode = eCtor, this._htOption = { width: n.width || 256, height: n.height || 256, typeNumber: h(n.text, n.correctLevel || c.H), colorDark: n.colorDark || "#000000", colorLight: n.colorLight || "#ffffff", correctLevel: n.correctLevel || c.H, text: n.text || "" }, this.makeCode(this._htOption.text) }, QRCode.CorrectLevel = c, QRCode.prototype.makeCode = function (t) { this._htOption.text = t, this._oQRCode = new eCtor(this._htOption.typeNumber, this._htOption.correctLevel), this._oQRCode.addData(this._htOption.text), this._oQRCode.make(), this._makeCanvas() }, QRCode.prototype._makeCanvas = function () { this._el.innerHTML = ""; var t = document.createElement("canvas"); t.width = this._htOption.width, t.height = this._htOption.height; for (var e = t.getContext("2d"), n = this._oQRCode.getModuleCount(), o = this._htOption.width / n, i = this._htOption.height / n, a = 0; a < n; a++)for (var s = 0; s < n; s++) { e.fillStyle = this._oQRCode.isDark(a, s) ? this._htOption.colorDark : this._htOption.colorLight; var h = Math.ceil((s + 1) * o) - Math.floor(s * o), r = Math.ceil((a + 1) * i) - Math.floor(a * i); e.fillRect(Math.round(s * o), Math.round(a * i), h, r) } this._el.appendChild(t) }, QRCode.prototype.clear = function () { this._el.innerHTML = "" }; }(); 